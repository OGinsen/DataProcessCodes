import numpy as np
from Denoise.DenoiseFun import Butterworth_Filter,Power_spectrum,NLMS,LMS
import matplotlib
matplotlib.rc('font',size = 35)
import matplotlib.pyplot as plt
plt.rcParams['font.sans-serif'] = ['Times New Roman']

def ButterworthFilterShow(Signal,Rest_signal):
	Frequency_signal, Power_signal = Power_spectrum(Signal, len(Signal), 2000)
	Frequency_rest, Power_rest = Power_spectrum(Rest_signal, len(Rest_signal), 2000)
	Filtered_signal = Butterworth_Filter(Signal)
	Filtered_Frequency, Filtered_Power = Power_spectrum(Filtered_signal,len(Filtered_signal),2000)
	plt.figure(1,figsize=(10,10))
	plt.suptitle('Time domain comparison by Butterworth filter',fontsize=35)
	plt.plot(Signal,'b-',label='Raw signal')
	plt.plot(Filtered_signal,'r-',label='Butterworth filtered signal')
	plt.ylabel('Normalized amplitude', fontsize=35)
	plt.xlabel('Sampling point', fontsize=35)
	plt.tick_params(labelsize=35)
	plt.grid(linestyle='--')
	plt.legend(fontsize=35)
	plt.figure(2,figsize=(10,10))
	plt.suptitle('Power spectrum comparison by Butterworth filter',fontsize=35)
	plt.stem(Frequency_signal,Power_signal,'b-','C0.',label='Raw signal')
	plt.stem(Filtered_Frequency,Filtered_Power,'r-','C3.',label='Butterworth filtered signal')
	plt.ylabel('PSD (|P(f)|$^{2}$)',fontsize=35)
	plt.xlabel('Frequency (Hz)',fontsize=35)
	plt.tick_params(labelsize=35)
	plt.grid(linestyle='--')
	plt.legend(fontsize=35)
	plt.figure(3,figsize=(10,10))
	plt.suptitle('Power spectrum of resting signal',fontsize=35)
	plt.stem(Frequency_rest,Power_rest,'b-','C0.',label='Resting signal')
	plt.ylabel('PSD (|P(f)|$^{2}$)',fontsize=35)
	plt.xlabel('Frequency (Hz)',fontsize=35)
	plt.tick_params(labelsize=35)
	plt.grid(linestyle='--')
	plt.legend(fontsize=35)

	plt.show()
def NLMSFilterShow(Signal,Rest_signal):
	Frequency_signal, Power_signal = Power_spectrum(Signal, len(Signal), 2000)
	Frequency_Rest, Power_Rest = Power_spectrum(Rest_signal, len(Rest_signal), 2000)
	[yn,Wn,en] = NLMS(Rest_signal,Signal,64,0.03,len(Signal))
	Frequency_en, Power_en = Power_spectrum(en, len(en), 2000)
	Frequency_yn, Power_yn = Power_spectrum(yn[64:], len(yn[64:]), 2000)
	plt.figure(4,figsize=(10,10))
	plt.suptitle('Time domain comparison by NLMS adaptive filter',fontsize=35)
	plt.plot(Signal, 'b-', label='Raw signal')
	plt.plot(en, 'r-', label='NLMS filtered signal')
	plt.ylabel('Normalized amplitude', fontsize=35)
	plt.xlabel('Sampling point', fontsize=35)
	plt.tick_params(labelsize=35)
	plt.grid(linestyle='--')
	plt.legend(fontsize=35)
	plt.figure(5,figsize=(10,10))
	plt.suptitle('Power spectrum comparison by NLMS adaptive filter', fontsize=35)
	plt.stem(Frequency_signal,Power_signal,'b-','C0.',label='Raw signal')
	plt.stem(Frequency_en,Power_en,'r-','C3.',label='NLMS filtered signal')
	plt.ylabel('PSD (|P(f)|$^{2}$)',fontsize=35)
	plt.xlabel('Frequency (Hz)',fontsize=35)
	plt.tick_params(labelsize=35)
	plt.grid(linestyle='--')
	plt.legend(fontsize=35)
	plt.figure(6,figsize=(10,10))
	plt.suptitle('Power spectrum comparison of reference noise and estimated noise', fontsize=35)
	plt.stem(Frequency_Rest,Power_Rest,'b-','C0.',label='Reference noise')
	plt.stem(Frequency_yn,Power_yn,'r-','C3.',label='NLMS estimated noise')
	plt.ylabel('PSD (|P(f)|$^{2}$)',fontsize=35)
	plt.xlabel('Frequency (Hz)',fontsize=35)
	plt.tick_params(labelsize=35)
	plt.grid(linestyle='--')
	plt.legend(fontsize=35)
	plt.show()
def LMSFilterShow(Signal,Rest_signal):
	Frequency_signal, Power_signal = Power_spectrum(Signal, len(Signal), 2000)
	Frequency_Rest, Power_Rest = Power_spectrum(Rest_signal, len(Rest_signal), 2000)
	[yn,Wn,en] = LMS(Rest_signal,Signal,64,200,len(Signal))
	Frequency_en, Power_en = Power_spectrum(en, len(en), 2000)
	Frequency_yn, Power_yn = Power_spectrum(yn[64:], len(yn[64:]), 2000)
	plt.figure(4,figsize=(10,10))
	plt.suptitle('Time domain comparison by LMS adaptive filter',fontsize=35)
	plt.plot(Signal, 'b-', label='Raw signal')
	plt.plot(en, 'r-', label='LMS filtered signal')
	plt.ylabel('Normalized amplitude', fontsize=35)
	plt.xlabel('Sampling point', fontsize=35)
	plt.tick_params(labelsize=35)
	plt.grid(linestyle='--')
	plt.legend(fontsize=35)
	plt.figure(5,figsize=(10,10))
	plt.suptitle('Power spectrum comparison by LMS adaptive filter', fontsize=35)
	plt.stem(Frequency_signal,Power_signal,'b-','C0.',label='Raw signal')
	plt.stem(Frequency_en,Power_en,'r-','C3.',label='LMS filtered signal')
	plt.ylabel('PSD (|P(f)|$^{2}$)',fontsize=35)
	plt.xlabel('Frequency (Hz)',fontsize=35)
	plt.tick_params(labelsize=35)
	plt.grid(linestyle='--')
	plt.legend(fontsize=35)
	plt.figure(6,figsize=(10,10))
	plt.suptitle('Power spectrum comparison of reference noise and estimated noise', fontsize=35)
	plt.stem(Frequency_Rest,Power_Rest,'b-','C0.',label='Reference noise')
	plt.stem(Frequency_yn,Power_yn,'r-','C3.',label='LMS estimated noise')
	plt.ylabel('PSD (|P(f)|$^{2}$)',fontsize=35)
	plt.xlabel('Frequency (Hz)',fontsize=35)
	plt.tick_params(labelsize=35)
	plt.grid(linestyle='--')
	plt.legend(fontsize=35)
	plt.show()

if __name__ == "__main__":
	signal_path = r'D:\All_Datasets\Datasets_Norm\S1\relax\norm_relax_1.txt'
	rest_path = r'D:\All_Datasets\Datasets_Norm\S1\relax\norm_relax_rest.txt'
	# signal = np.loadtxt(signal_path,delimiter=',',skiprows=0)[5000:11500,0]
	signal = np.loadtxt(signal_path, delimiter=',', skiprows=0)[:16000, 0]
	rest = np.loadtxt(rest_path,delimiter=',',skiprows=0)[:len(signal),0]
	ButterworthFilterShow(signal,rest)
	NLMSFilterShow(signal,rest)
	LMSFilterShow(signal, rest)
