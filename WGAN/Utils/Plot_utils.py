import matplotlib.pyplot as plt
import numpy as np


def plot_losses(metrics, epoch,G = -1,ch = -1):
	losses = np.array(metrics)
	plt.plot(losses[:, 0], label='Discriminator')
	plt.plot(losses[:, 1], label='Generator')
	plt.title('Losses - Generator / Discriminator')
	plt.xlabel('Epoch')
	plt.ylabel('Loss/Metric')
	plt.legend()
	plt.savefig('./Output/G'+str(G)+'/ch'+str(ch)+'/Losses_{}.png'.format(epoch))
	# plt.show()
	plt.close()

	plt.figure()
	plt.plot(losses[:, 2], label='FFT MSE')
	plt.title('FFT of Generated Signal')
	plt.xlabel('Epoch')
	plt.ylabel('FFT MSE')
	plt.legend()
	plt.savefig('./Output/G'+str(G)+'/ch'+str(ch)+'/FFT_{}.png'.format(epoch))
	# plt.show()
	plt.close()

	plt.figure()
	plt.plot(losses[:, 3], label='DTW Distance')
	plt.title('DTW Distance of Generated Signal')
	plt.xlabel('Epoch')
	plt.ylabel('DTW Distance')
	plt.legend()
	plt.savefig('./Output/G'+str(G)+'/ch'+str(ch)+'/DTW_{}.png'.format(epoch))
	# plt.show()
	plt.close()

	plt.figure()
	plt.plot(losses[:, 4], label='Cross-correlation')
	plt.title('Cross-correlation between reference signal and generated signal')
	plt.xlabel('Epoch')
	plt.ylabel('Cross-correlation')
	plt.legend()
	plt.savefig('./Output/G'+str(G)+'/ch'+str(ch)+'/Cross_correlation_{}.png'.format(epoch))
	# plt.show()
	plt.close()

	plt.figure()
	plt.plot(losses[:, 5], label='validated')
	plt.title('validated of diccriminator')
	plt.xlabel('Epoch')
	plt.ylabel('validated')
	plt.legend()
	plt.savefig('./Output/G'+str(G)+'/ch'+str(ch)+'/validated_{}.png'.format(epoch))
	# plt.show()
	plt.close()



def plot_prediction_reference(gen_signal,ref_signal,epoch=0,G = -1,ch = -1):
	plt.figure()
	plt.subplot(211)
	# axes = plt.gca()
	# axes.set_ylim([-0.3,0.3])
	plt.plot(gen_signal[0],label='Generated Signal')
	plt.xlabel('Epoch' + str(epoch))
	plt.ylabel('EMG')
	plt.legend()
	plt.grid()
	plt.subplot(212)
	# axes = plt.gca()
	# axes.set_ylim([-0.3,0.3])
	plt.plot(ref_signal[0],label='Reference Signal')
	plt.xlabel('Epoch' + str(epoch))
	plt.ylabel('EMG')
	plt.legend()
	plt.grid()
	plt.savefig('./Output/G'+str(G)+'/ch'+str(ch)+'/Generated_Reference' + str(epoch) + '.png')
	plt.close()

def plot_prediction_reference_generate(gen_signal,ref_signal,epoch=0):
	plt.figure()
	plt.subplot(211)
	# axes = plt.gca()
	# axes.set_ylim([-0.3,0.3])
	plt.plot(gen_signal[0],label='Generated Signal')
	plt.xlabel('Epoch' + str(epoch))
	plt.ylabel('EMG')
	plt.legend()
	plt.grid()
	plt.subplot(212)
	# axes = plt.gca()
	# axes.set_ylim([-0.3,0.3])
	plt.plot(ref_signal[0],label='Reference Signal')
	plt.xlabel('Epoch' + str(epoch))
	plt.ylabel('EMG')
	plt.legend()
	plt.grid()
	plt.savefig('./GeneratedSignals/Generated_Reference' + str(epoch) + '.png')
	plt.close()
